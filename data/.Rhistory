listobject[[i]] <- delete_vertices(listobject[[i]],names[[i]])
}
return(listobject)
}
#Functions needed to create Louvain Communities
calculateModularitys_inside <- function(object){
out <- tryCatch(
{
message("Es wird versucht..")
suppressWarnings(cluster_louvain(object))
},
error=function(cond) {
message("Dieses Netzwerk ist zu klein")
return(NA)
},
warning=function(cond) {
return(NULL)
},
finally={
}
)
return(out)
}
calculateModularitys <- function(list){
list <- lapply(list,calculateModularitys_inside)
}
#Functions needed to extract number of communities out of community objects
getNumClustersModularity_inside <- function(listobject){
if(any(is.na(listobject))){
return(NA)
}else{
clusters <- nrow(as.data.frame(sizes(listobject)) %>%
filter(Freq > 1))
return(clusters)
}
}
getNumClustersModularity <- function(listobject){
list <- lapply(listobject,getNumClustersModularity_inside)
}
getVectors <- function(listobject){
return(as.vector(unlist(listobject)))
}
addNames <- function(listobject){
return(
cbind(names,listobject)
)
}
convertToDFs <- function(listobject){
return(
as.data.frame(listobject)
)
}
convertType <- function(listobject){
listobject$node_name <- as.numeric(listobject$node_name)
listobject$communities_louvain <- as.numeric(listobject$communities_louvain)
return(listobject)
}
#Merge julia-generated DFs with community sizes
mergeDFs <- function(index){
data <- left_join(network_dfs[[index]],vectors[[index]],by="node_name",copy=T)
return(data)
}
#Export DFs
exportDFs <- function(index){
write.csv(dfs_final[[index]],paste0("./dfs_with_modularity/network_",index,".csv"),row.names = F)
}
names(dfs_final[1])
## The magic starts here---------------------------
#Create filelists for import
graphs_list <- list.files("./networks/")
dfileslist <- list.files(paste0("./dfs/"))
#Import networks and julia-generated dfs
graphs <- lapply(graphs_list,readGraphs)
network_dfs <- lapply(dfileslist,importNetworkDfs)
#Make sure the networks are undirected
lapply(1:8,function(index){return(is.directed(graphs[[index]]))})
#Add name attribute to networks
graphs <- lapply(1:8,vertAttr)
#Save names in vector for later access (its simple, all nodes are named incrementally from 1:1000)
names <- c(as.character(1:1000))
#Create ego-graphs
ego_graphs <- lapply(1:8,createEgoGraphs)
#Delete egos
ego_graphs_no_ego <- lapply(ego_graphs,deleteEgos_inside)
#Calcualte modularities (results in list of lists of iGraph community objects)
modularities <- lapply(ego_graphs_no_ego,calculateModularitys)
#Extract number of communities out of iGraph community objects (note: trivial communities (size smaller or equal 1) will be dismissed)
numClustersModularity <- lapply(modularities,getNumClustersModularity) #this results in community sizes, but names are still missing
#Make numClustersModularity to vectors
vectors <- lapply(numClustersModularity,getVectors)
#Add node names as separate column, taken from the names vector
vectors <- lapply(vectors,addNames)
#Convert to DFs
vectors <- lapply(vectors,convertToDFs)
#Change column names
vectors <- lapply(vectors,setNames, nm = c("node_name","communities_louvain"))
#Convert type of columns, for later merging
vectors <- lapply(vectors,convertType)
#Merge julia-generated DFs with community sizes
dfs_final <- lapply(1:8,mergeDFs)
#Name list objects for export later on
names(dfs_final) <- dfileslist
#Export new DFs
lapply(1:8,exportDFs)
## load up the packages we will need:
require(igraph)
require(dplyr)
require(here)
## ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance, but has no impact on mac
##------------------------Functions needed
readCSVs <- function(filename){
object <- read.csv(paste0(here("dfs_with_modularity"),"/",filename))
return(object)
}
## load up the packages we will need:
require(igraph)
require(dplyr)
require(here)
## ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance, but has no impact on mac
##------------------------Functions needed
readCSVs <- function(filename){
object <- read.csv(paste0(here("dfs_with_modularity"),"/",filename))
return(object)
}
#Create list of DFs
DFs_files_list <- list.files(here("dfs_with_modularity"))
DFs <- lapply(DFs_files_list,readCSVs)
View(DFs)
View(DFs)
install.packages("ggcorrplot")
library(ggcorrplot)
testDF <- DFs[[1]]
corr <- round(cor(testDF), 1)
View(corr)
p.mat <- cor_pmat(testDF)
View(p.mat)
ggcorrplot(corr)
ggcorrplot(corr, hc.order = TRUE,
type = "lower", p.mat = p.mat)
ggcorrplot(corr, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
library(dplyr)
corr <- round(cor(testDF %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain)
), 1)
p.mat <- cor_pmat(testDF)
ggcorrplot(corr, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE,
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
ggcorrplot(corr, hc.order = TRUE, type = "lower",
p.mat = p.mat,
lab = TRUE,
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
hist(DFs$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs))
) # set number of bins
View(DFs)
hist(DFs[[1]]$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs))
) # set number of bins
hist(DFs[[1]]$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs[[1]]))
) # set number of bins
hist(DFs[[2]]$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs[[1]]))
) # set number of bins
hist(DFs[[3]]$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs[[1]]))
) # set number of bins
hist(DFs[[4]]$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs[[1]]))
) # set number of bins
hist(DFs[[5]]$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs[[1]]))
) # set number of bins
hist(DFs[[6]]$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs[[1]]))
) # set number of bins
hist(DFs[[7]]$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs[[1]]))
) # set number of bins
hist(DFs[[78]$communities_louvain,
hist(DFs[[8]$communities_louvain,
hist(DFs[[8]]$communities_louvain,
xlab = "communities_louvain",
main = "Histogram of communities_louvain",
breaks = sqrt(nrow(DFs[[1]]))
) # set number of bins
shapiro.test(DFs[[1]]$communities_louvain)
View(DFs[[1]])
normalityTest <- function(df,index){
shapiro.test(df[,2])
}
lapply(DFs, normalityTest,2)
sapply(DFs, normalityTest,2)
View(sapply(DFs, normalityTest,2))
View(lapply(DFs, normalityTest,2))
lapply(DFs, normalityTest, 2)[[1]][["p.value"]]
lapply(DFs, normalityTest, 2)[[1]][["p.value"]]<0.05
relevantCols <- c(2,3,4,5,10)
normalityTest <- function(df,col){
shapiro.test(DFs[[df]],col])
}
shapiro.test(DFs[[df]],col)
normalityTest <- function(df,col){
shapiro.test(DFs[[df]],col)
}
for(i in relevantCols){
print(i)
}
names(DFs[[1]][,2,3,4,5,10)
names(DFs[[1]][,2,3,4,5,10])
relevantColNames <- c("k_shell","degree","community_centrality","num_clusters","communities_louvain")
normalityTest <- function(df,col){
shapiro.test(DFs[[df]],col)
}
for(i in relevantCols){
lapply(DFs, normalityTest,i)
}
lapply(DFs, normalityTest,2)
normalityTest <- function(df,col){
shapiro.test(DFs[[df]],col)
}
lapply(DFs, normalityTest,2)
lapply(DFs, normalityTest,2)
normalityTest <- function(df){
shapiro.test(DFs[[df]],2)
}
lapply(DFs, normalityTest)
normalityTest <- function(df,col){
shapiro.test(df,col)
}
lapply(DFs, normalityTest,2)
normalityTest <- function(df,col){
shapiro.test(df,col)
}
lapply(DFs, normalityTest,2)
normalityTest <- function(df){
shapiro.test(df,2)
}
lapply(DFs, normalityTest,2)
normalityTest <- function(index){
shapiro.test(DFs[[index]],2)
}
lapply(1:8,normalityTest)
normalityTest <- function(index,measure){
shapiro.test(DFs[[index]][,measure])
}
lapply(1:8,normalityTest,2)
normalityTest <- function(df){
for(i in relevantCols){
return(shapiro.test(df[,i]))
}
}
lapply(DFs,normalityTest)
normalityTest_inside <- function(df,rel){
return(shapiro.test(df[,rel]))
}
normalityTest_inside <- function(rel,df){
return(shapiro.test(df[,rel]))
}
normalityTest <- function(df){
df <- df
object <- lapply(relevantCols,normalityTest_inside,df)
}
lapply(DFs,normalityTest)
save <- lapply(DFs,normalityTest)
View(save)
getPvalueInside <- function(df){
if(df[["p.value"]]<0.20){
return("no normality")
} else if(df[["p.value"]]>0.20){
return("normality given")
}
}
getPvalueInsideInside <- function(df){
if(df[["p.value"]]<0.20){
return("no normality")
} else if(df[["p.value"]]>0.20){
return("normality given")
}
}
I
getPvalueInside <- function(df){
list <- lapply(df,getPvalueInsideInside)
return(list)
}
getPvalue <- function(index){
list <- lapply(save[[index]],getPvalueInside)
}
lapply(1:8,getPvalue)
save[[1]][[1]][[3]]
save[[1]][[1]][[2]]
getPvalueInsideInside <- function(df){
if(df[[2]]<0.20){
return("no normality")
} else if(df[[2]]>0.20){
return("normality given")
}
}
lapply(1:8,getPvalue)
getPvalueInside <- function(df){
if(df[[2]]<0.20){
return("no normality")
} else if(df[[2]]>0.20){
return("normality given")
}
}
getPvalue <- function(df){
list <- lapply(df,getPvalueInsideInside)
return(list)
}
lapply(DFs,getPvalue)
lapply(save,getPvalue)
getPvalueInside <- function(df){
if(df[[2]]<0.05){
return("no normality")
} else if(df[[2]]>0.05){
return("normality given")
}
}
getPvalue <- function(df){
list <- lapply(df,getPvalueInsideInside)
return(list)
}
lapply(save,getPvalue)
getPvalueInside <- function(df){
if(df[[2]]<0.20){
return("no normality")
} else if(df[[2]]>0.20){
return("normality given")
}
}
getPvalue <- function(df){
list <- lapply(df,getPvalueInsideInside)
return(list)
}
normalities <- lapply(save,getPvalue)
View(normalities)
View(save)
shapiro.test(DFs[[8]][[2]])
shapiro.test(DFs[[8]][[3]])
shapiro.test(DFs[[8]][[4]])
normalities <- unlist(lapply(save,getPvalue))
normalities <- lapply(save,getPvalue)
View(normalities)
lapply(normalities,as.data.frame)
normalities <- lapply(normalities,as.data.frame)
View(normalities)
View(normalities)
normalities <- lapply(normalities,names,relevantColNames)
normalities <- lapply(normalities,function(df){names(df) <- relevantColNames})
View(normalities)
View(normalities)
normalities <- lapply(save,getPvalue)
normalities <- lapply(normalities,as.data.frame)
normalities <- lapply(normalities,function(df){colnames(df) <- relevantColNames})
View(normalities)
View(normalities)
normalities <- lapply(normalities,setNames,relevantColNames)
View(normalities)
normalities <- lapply(save,getPvalue)
normalities <- lapply(normalities,as.data.frame)
normalities <- lapply(normalities,setNames,relevantColNames)
View(normalities)
ggcorrplot(corr, hc.order = TRUE, type = "lower",
p.mat = p.mat,
lab = TRUE,
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
createPlot <- function(df){
corr <- round(cor(df %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain)
,method = "spearman"), 1)
p.mat <- cor_pmat(df)
ggcorrplot(corr, hc.order = TRUE, type = "lower",
p.mat = p.mat,
lab = TRUE,
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
}
createPlot <- function(df){
corr <- round(cor(df %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain)
,method = "spearman"), 1)
p.mat <- cor_pmat(df)
p <- ggcorrplot(corr, hc.order = TRUE, type = "lower",
p.mat = p.mat,
lab = TRUE,
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
return(p)
}
plots <- lapply(DFs,createPlot)
View(plots)
plots[[1]]
plots[[8]]
createPlot <- function(df){
corr <- round(cor(df %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain)
,method = "spearman"), 1)
p.mat <- cor_pmat(df %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain))
p <- ggcorrplot(corr, hc.order = TRUE, type = "lower",
p.mat = p.mat,
lab = TRUE,
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
return(p)
}
plots <- lapply(DFs,createPlot)
View(plots)
plots[[8]]
plots[[7]]
plots[[6]]
plots[[3]]
plots[[8]]
createPlot <- function(df){
corr <- round(cor(df %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain)
,method = "spearman"), 2)
p.mat <- cor_pmat(df %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain))
p <- ggcorrplot(corr, hc.order = TRUE, type = "lower",
p.mat = p.mat,
lab = TRUE,
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
return(p)
}
plots <- lapply(DFs,createPlot)
View(plots)
plots[[8]]
plots[[6]]
plots[[8]]
plots[[5]]
require(ggcorrplot)
normalities
plots <- lapply(DFs,createPlot)
plots
#Create Plots
createPlot <- function(df){
corr <- round(cor(df %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain)
,method = "spearman"), 2)
p.mat <- cor_pmat(df %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain))
p <- ggcorrplot(corr, hc.order = TRUE, type = "lower",
p.mat = p.mat,
lab = TRUE,
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))+labs(title = df)
return(p)
}
plots <- lapply(DFs,createPlot)
plots
createPlot <- function(index){
corr <- round(cor(DFs[[index]] %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain)
,method = "spearman"), 2)
p.mat <- cor_pmat(DFs[[index]] %>%
select(k_shell,num_clusters,degree,community_centrality,total_infection,communities_louvain))
p <- ggcorrplot(corr, hc.order = TRUE, type = "lower",
p.mat = p.mat,
lab = TRUE,
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))+labs(title = DFs_files_list[[index]])
return(p)
}
plots <- lapply(1:8,createPlot)
plots
